rm(list = ls())

library(dplyr)
library(reshape2)
library(lme4)

library(simstudy)


# See:
# https://cran.r-project.org/web/packages/simstudy/vignettes/simstudy.html

# Simulation using simstudy has two primary steps. 
# First, the user defines the
# data elements of a data set. Second, the user generates the data, using the
# definitions in the first step. Additional functionality exists to simulate
# observed or randomized treatment assignment/exposures, to generate survival
# data, to create longitudinal/panel data, to create multi-level/hierarchical
# data, to create datasets with correlated variables based on a specified
# covariance structure, to merge datasets, and to create data sets with missing
# data.


create.data <- function(){

  # Invent your model
  # three timepoints (categorical)
  # grps are trt and ctl
  # y = b0 + b1(time == 2) + b2(time == 3) + b3(grp == trt)
  #     b4(time == 2)(grp == trt) + b5(time == 3)(grp == trt)
  
  # set.seed(32578)
  
  # I forget the actual numbers
   
  b0 <- 12
  b1 <- -1
  b2 <- -1
  b3 <- 0
  b4 <- -1
  b5 <- -3
  
  
  # for ctl grp, means at time 1, 2, 3
  
  mu.ctl <- c(b0,    b0+b1,       b0+b2)
  mu.trt <- c(b0+b3, b0+b1+b4,    b0+b2+b5)
  
  N <- 140 # N per group
  
  # Sigma is the sd on resp, rho is the within measure correl (I think)
  dt.ctl <- genCorData(N, mu = mu.ctl, sigma = 5, rho = 0.5, 
                   corstr = "cs", 
                   cnames = c("x0", "x1", "x2"))
  dt.ctl$grp <- "ctl"
  dt.trt <- genCorData(N, mu = mu.trt, sigma = 5, rho = 0.5, 
                       corstr = "cs", 
                       cnames = c("x0", "x1", "x2"))
  dt.trt$grp <- "trt"
  dt.trt$id <- dt.trt$id + N
  
  dt <- as_data_frame(rbind(dt.ctl, dt.trt))
  
  
  
  dt.long <- dt %>%
    reshape2::melt(id.vars = c("id", "grp")) %>%
    dplyr::mutate(time = 1+as.numeric(substr(as.character(variable), 2, 2))) %>%
    dplyr::arrange(id, time)
  dt.long$id <- as.factor(dt.long$id)
  dt.long$grp <- as.factor(dt.long$grp)
  dt.long$time <- as.factor(dt.long$time)
  
  # names(dt.long)
  
  # p <- ggplot(data = dt.long, aes(x = time, y = value, 
  #                                 group = id,
  #                                 colour = grp))
  # p <- p + geom_line()
  # p

  return(dt.long)
}


# Wrap the data construction in a function (remove the seed)


model <- function(x){
  
  dat <- create.data()
  #lm1 <- lmer(value ~ grp * time + (1|id), data = dat, REML = F)
  #lm0 <- lmer(value ~ grp + time + (1|id), data = dat, REML = F)
  lm0 <- lmer(value ~ grp + time+ (1|id), data = dat, REML = F)
  #lsm<-lsmeans(lm1, ~grp*time)
  #res<-contrast(lsm,method="trt.vs.ctrl")
  coefs <- data.frame(coef(summary(lm0)))
  coefs$p.z <- round(2 * (1 - pnorm(abs(coefs$t.value))), 5)
  # coefs['grptrt:time4','p.z']
  #lrp <- anova(lm0, lm1)$"Pr(>Chisq)"[2]
  #return(coefs['grptrt:time4','p.z'])
  return(coefs['grptrt','p.z'])
  #return(lrp)
  
}


p <- unlist(lapply(1:1000, model))
#p <- lapply(1:1000, model)

# Power
length(p[p < 0.05])/1000


